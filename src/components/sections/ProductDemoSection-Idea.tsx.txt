'use client'

import React, { useState, useEffect, useRef } from 'react'
import { motion, AnimatePresence, useScroll, useTransform } from 'framer-motion'
import { useInView } from 'react-intersection-observer'

export function ProductDemoSection() {
  const [activeDemo, setActiveDemo] = useState(0)
  const [isPlaying, setIsPlaying] = useState(false)
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 })
  const [currentMessageIndex, setCurrentMessageIndex] = useState(0)
  const sectionRef = useRef<HTMLDivElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  
  const { scrollYProgress } = useScroll({
    target: sectionRef,
    offset: ["start end", "end start"]
  })

  const y = useTransform(scrollYProgress, [0, 1], [100, -100])
  const opacity = useTransform(scrollYProgress, [0, 0.3, 0.7, 1], [0, 1, 1, 0])

  const { ref: inViewRef, inView } = useInView({
    threshold: 0.2,
    triggerOnce: false
  })

  // Premium demo data
  const demoFeatures = [
    {
      id: 'ai-chat',
      title: 'Intelligent Conversations',
      subtitle: 'AI that understands context',
      description: 'Experience natural, contextual conversations with our advanced AI that learns and adapts to your communication style.',
      accent: '#3B82F6', // Blue
      icon: 'ü§ñ',
      preview: 'chat'
    },
    {
      id: 'automation',
      title: 'Smart Automation',
      subtitle: 'Workflow optimization',
      description: 'Automate complex workflows with intelligent decision-making that saves time and reduces errors.',
      accent: '#10B981', // Green
      icon: '‚ö°',
      preview: 'automation'
    },
    {
      id: 'analytics',
      title: 'Deep Analytics',
      subtitle: 'Actionable insights',
      description: 'Get powerful insights from your data with AI-powered analytics that reveal hidden patterns and opportunities.',
      accent: '#F59E0B', // Amber
      icon: 'üìä',
      preview: 'analytics'
    },
    {
      id: 'integration',
      title: 'Seamless Integration',
      subtitle: 'Connect everything',
      description: 'Integrate with your existing tools and workflows seamlessly with our universal API and pre-built connectors.',
      accent: '#EF4444', // Red
      icon: 'üîó',
      preview: 'integration'
    }
  ]

  // Animated chat messages
  const chatMessages = [
    { sender: 'user', text: 'Analyze our Q4 sales performance', time: '14:32' },
    { sender: 'ai', text: 'I\'ve analyzed your Q4 data. Revenue increased 24% with the highest growth in the enterprise segment.', time: '14:32' },
    { sender: 'ai', text: 'Key insights: üìà Enterprise sales up 45%\nüí° Customer retention at 94%\nüéØ Top performing product: AI Analytics Suite', time: '14:33' },
    { sender: 'user', text: 'Create a presentation for the board meeting', time: '14:34' },
    { sender: 'ai', text: 'I\'ve created a comprehensive board presentation with your Q4 metrics, growth projections, and strategic recommendations. Would you like me to schedule the meeting?', time: '14:34' }
  ]

  // Mouse tracking for premium effects
  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      if (sectionRef.current) {
        const rect = sectionRef.current.getBoundingClientRect()
        setMousePosition({
          x: (e.clientX - rect.left) / rect.width,
          y: (e.clientY - rect.top) / rect.height
        })
      }
    }

    window.addEventListener('mousemove', handleMouseMove)
    return () => window.removeEventListener('mousemove', handleMouseMove)
  }, [])

  // Auto-play chat messages
  useEffect(() => {
    if (isPlaying && activeDemo === 0) {
      const interval = setInterval(() => {
        setCurrentMessageIndex(prev => {
          if (prev < chatMessages.length - 1) {
            return prev + 1
          } else {
            setIsPlaying(false)
            return 0
          }
        })
      }, 2000)
      return () => clearInterval(interval)
    }
  }, [isPlaying, activeDemo, chatMessages.length])

  // Premium particle system
  useEffect(() => {
    if (!canvasRef.current) return

    const canvas = canvasRef.current
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    const resizeCanvas = () => {
      canvas.width = canvas.offsetWidth * window.devicePixelRatio
      canvas.height = canvas.offsetHeight * window.devicePixelRatio
      ctx.scale(window.devicePixelRatio, window.devicePixelRatio)
    }

    resizeCanvas()
    window.addEventListener('resize', resizeCanvas)

    const particles: any[] = []
    const particleCount = 50

    class Particle {
      x: number
      y: number
      size: number
      speedX: number
      speedY: number
      opacity: number
      color: string

      constructor() {
        this.x = Math.random() * canvas.offsetWidth
        this.y = Math.random() * canvas.offsetHeight
        this.size = Math.random() * 2 + 0.5
        this.speedX = (Math.random() - 0.5) * 0.5
        this.speedY = (Math.random() - 0.5) * 0.5
        this.opacity = Math.random() * 0.3 + 0.1
        this.color = demoFeatures[activeDemo]?.accent || '#3B82F6'
      }

      update() {
        this.x += this.speedX
        this.y += this.speedY

        if (this.x < 0 || this.x > canvas.offsetWidth) this.speedX *= -1
        if (this.y < 0 || this.y > canvas.offsetHeight) this.speedY *= -1

        // Mouse interaction
        const dx = mousePosition.x * canvas.offsetWidth - this.x
        const dy = mousePosition.y * canvas.offsetHeight - this.y
        const distance = Math.sqrt(dx * dx + dy * dy)

        if (distance < 100) {
          this.x -= dx * 0.01
          this.y -= dy * 0.01
        }
      }

      draw() {
        if (!ctx) return
        ctx.save()
        ctx.globalAlpha = this.opacity
        ctx.fillStyle = this.color
        ctx.beginPath()
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2)
        ctx.fill()
        ctx.restore()
      }
    }

    // Initialize particles
    for (let i = 0; i < particleCount; i++) {
      particles.push(new Particle())
    }

    const animate = () => {
      ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight)
      
      particles.forEach(particle => {
        particle.update()
        particle.draw()
      })

      requestAnimationFrame(animate)
    }

    animate()

    return () => {
      window.removeEventListener('resize', resizeCanvas)
    }
  }, [activeDemo, mousePosition])

  const ChatPreview = () => (
    <div className="h-full bg-gradient-to-br from-gray-900 to-black rounded-2xl border border-gray-800 p-6 overflow-hidden relative">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <div className="w-3 h-3 bg-red-500 rounded-full"></div>
          <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
          <div className="w-3 h-3 bg-green-500 rounded-full"></div>
        </div>
        <div className="text-gray-400 text-sm">Kalina AI Assistant</div>
      </div>

      <div className="space-y-4 h-80 overflow-y-auto scrollbar-hide">
        <AnimatePresence>
          {chatMessages.slice(0, currentMessageIndex + 1).map((message, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20, scale: 0.95 }}
              animate={{ opacity: 1, y: 0, scale: 1 }}
              transition={{ duration: 0.5, ease: "easeOut" }}
              className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div className={`max-w-xs px-4 py-3 rounded-2xl ${
                message.sender === 'user' 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-800 text-gray-100'
              }`}>
                <p className="text-sm whitespace-pre-line">{message.text}</p>
                <p className="text-xs opacity-70 mt-1">{message.time}</p>
              </div>
            </motion.div>
          ))}
        </AnimatePresence>
      </div>

      <motion.button
        onClick={() => {
          setIsPlaying(!isPlaying)
          if (!isPlaying) setCurrentMessageIndex(0)
        }}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        className="absolute bottom-6 right-6 bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-full shadow-lg transition-colors"
      >
        {isPlaying ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}
      </motion.button>
    </div>
  )

  const AutomationPreview = () => (
    <div className="h-full bg-gradient-to-br from-gray-900 to-black rounded-2xl border border-gray-800 p-6 relative overflow-hidden">
      <div className="text-center mb-8">
        <h3 className="text-xl font-bold text-white mb-2">Workflow Automation</h3>
        <p className="text-gray-400">Processing 1,247 tasks automatically</p>
      </div>

      <div className="space-y-6">
        {[
          { name: 'Email Processing', progress: 85, color: '#10B981' },
          { name: 'Data Analysis', progress: 72, color: '#3B82F6' },
          { name: 'Report Generation', progress: 94, color: '#F59E0B' },
          { name: 'Client Outreach', progress: 67, color: '#EF4444' }
        ].map((task, index) => (
          <motion.div
            key={task.name}
            initial={{ opacity: 0, x: -50 }}
            animate={inView ? { opacity: 1, x: 0 } : {}}
            transition={{ duration: 0.6, delay: index * 0.1 }}
            className="bg-gray-800/50 rounded-xl p-4"
          >
            <div className="flex justify-between items-center mb-3">
              <span className="text-white font-medium">{task.name}</span>
              <span className="text-gray-400 text-sm">{task.progress}%</span>
            </div>
            <div className="w-full bg-gray-700 rounded-full h-2">
              <motion.div
                className="h-2 rounded-full"
                style={{ backgroundColor: task.color }}
                initial={{ width: 0 }}
                animate={inView ? { width: `${task.progress}%` } : {}}
                transition={{ duration: 1.5, delay: index * 0.2 }}
              />
            </div>
          </motion.div>
        ))}
      </div>

      <div className="absolute top-4 right-4">
        <motion.div
          animate={{ rotate: 360 }}
          transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
          className="w-8 h-8 border-2 border-green-500 border-t-transparent rounded-full"
        />
      </div>
    </div>
  )

  const AnalyticsPreview = () => (
    <div className="h-full bg-gradient-to-br from-gray-900 to-black rounded-2xl border border-gray-800 p-6 relative overflow-hidden">
      <div className="grid grid-cols-2 gap-4 h-full">
        <div className="space-y-4">
          <div className="bg-gray-800/50 rounded-xl p-4">
            <h4 className="text-white font-semibold mb-2">Revenue Growth</h4>
            <div className="text-3xl font-bold text-green-400">+24.5%</div>
            <p className="text-gray-400 text-sm">vs last quarter</p>
          </div>
          <div className="bg-gray-800/50 rounded-xl p-4">
            <h4 className="text-white font-semibold mb-2">Active Users</h4>
            <div className="text-3xl font-bold text-blue-400">12.8k</div>
            <p className="text-gray-400 text-sm">+8.3% this month</p>
          </div>
        </div>

        <div className="bg-gray-800/50 rounded-xl p-4">
          <h4 className="text-white font-semibold mb-4">Performance Metrics</h4>
          <div className="space-y-3">
            {['CPU Usage', 'Memory', 'Network', 'Storage'].map((metric, index) => (
              <div key={metric} className="flex items-center justify-between">
                <span className="text-gray-300 text-sm">{metric}</span>
                <div className="flex items-center space-x-2">
                  <div className="w-16 bg-gray-700 rounded-full h-2">
                    <motion.div
                      className="h-2 rounded-full bg-gradient-to-r from-yellow-400 to-orange-500"
                      initial={{ width: 0 }}
                      animate={inView ? { width: `${Math.random() * 60 + 30}%` } : {}}
                      transition={{ duration: 1, delay: index * 0.1 }}
                    />
                  </div>
                  <span className="text-gray-400 text-xs">{Math.floor(Math.random() * 40 + 40)}%</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  )

  const IntegrationPreview = () => (
    <div className="h-full bg-gradient-to-br from-gray-900 to-black rounded-2xl border border-gray-800 p-6 relative overflow-hidden">
      <div className="text-center mb-6">
        <h3 className="text-xl font-bold text-white mb-2">Connected Services</h3>
        <p className="text-gray-400">24 integrations active</p>
      </div>

      <div className="grid grid-cols-3 gap-4">
        {[
          { name: 'Slack', color: '#4A154B', status: 'active' },
          { name: 'Gmail', color: '#EA4335', status: 'active' },
          { name: 'Notion', color: '#000000', status: 'active' },
          { name: 'Zoom', color: '#2D8CFF', status: 'syncing' },
          { name: 'Spotify', color: '#1DB954', status: 'active' },
          { name: 'GitHub', color: '#181717', status: 'active' }
        ].map((service, index) => (
          <motion.div
            key={service.name}
            initial={{ opacity: 0, scale: 0 }}
            animate={inView ? { opacity: 1, scale: 1 } : {}}
            transition={{ duration: 0.5, delay: index * 0.1 }}
            whileHover={{ scale: 1.1, y: -5 }}
            className="bg-gray-800/50 rounded-xl p-4 text-center relative cursor-pointer"
          >
            <div
              className="w-8 h-8 rounded-lg mx-auto mb-2"
              style={{ backgroundColor: service.color }}
            />
            <p className="text-white text-sm font-medium">{service.name}</p>
            <div className={`absolute top-2 right-2 w-2 h-2 rounded-full ${
              service.status === 'active' ? 'bg-green-400' : 'bg-yellow-400 animate-pulse'
            }`} />
          </motion.div>
        ))}
      </div>
    </div>
  )

  const renderPreview = () => {
    switch (demoFeatures[activeDemo]?.preview) {
      case 'chat': return <ChatPreview />
      case 'automation': return <AutomationPreview />
      case 'analytics': return <AnalyticsPreview />
      case 'integration': return <IntegrationPreview />
      default: return <ChatPreview />
    }
  }

  return (
    <section ref={sectionRef} className="relative py-32 bg-white overflow-hidden">
      {/* Animated background canvas */}
      <canvas
        ref={canvasRef}
        className="absolute inset-0 pointer-events-none"
        style={{ width: '100%', height: '100%' }}
      />

      {/* Premium background effects */}
      <div className="absolute inset-0">
        <motion.div
          className="absolute top-1/4 left-1/4 w-96 h-96 bg-gradient-radial from-blue-500/10 to-transparent rounded-full blur-3xl"
          style={{ x: y }}
        />
        <motion.div
          className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-gradient-radial from-purple-500/10 to-transparent rounded-full blur-3xl"
          style={{ x: useTransform(y, [0, 1], [0, -50]) }}
        />
      </div>

      <div ref={inViewRef} className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        {/* Premium header */}
        <motion.div 
          className="text-center mb-20"
          style={{ opacity }}
        >
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={inView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 0.8 }}
            className="inline-flex items-center px-6 py-3 bg-gradient-to-r from-gray-100 to-gray-200 rounded-full text-gray-700 text-sm font-semibold mb-8 shadow-lg"
          >
            <span className="w-2 h-2 bg-green-400 rounded-full mr-3 animate-pulse"></span>
            PRODUCT DEMONSTRATION
          </motion.div>

          <motion.h2
            initial={{ opacity: 0, y: 50 }}
            animate={inView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 1, delay: 0.2 }}
            className="text-5xl md:text-6xl lg:text-7xl font-black mb-8 leading-tight"
          >
            <span className="text-black">See it in</span>
            <br />
            <span className="bg-gradient-to-r from-gray-600 to-black bg-clip-text text-transparent">
              action
            </span>
          </motion.h2>

          <motion.p
            initial={{ opacity: 0, y: 30 }}
            animate={inView ? { opacity: 1, y: 0 } : {}}
            transition={{ duration: 0.8, delay: 0.4 }}
            className="text-xl md:text-2xl text-gray-600 max-w-3xl mx-auto leading-relaxed"
          >
            Experience the power of our AI platform through interactive demonstrations
            that showcase real-world applications and results.
          </motion.p>
        </motion.div>

        {/* Premium demo interface */}
        <div className="grid lg:grid-cols-12 gap-12 items-center">
          {/* Feature selector */}
          <motion.div 
            className="lg:col-span-5 space-y-6"
            initial={{ opacity: 0, x: -50 }}
            animate={inView ? { opacity: 1, x: 0 } : {}}
            transition={{ duration: 1, delay: 0.6 }}
          >
            {demoFeatures.map((feature, index) => (
              <motion.div
                key={feature.id}
                onClick={() => setActiveDemo(index)}
                whileHover={{ scale: 1.02, x: 10 }}
                whileTap={{ scale: 0.98 }}
                className={`p-6 rounded-3xl cursor-pointer transition-all duration-500 relative overflow-hidden group ${
                  activeDemo === index 
                    ? 'bg-black text-white shadow-2xl' 
                    : 'bg-gray-50 hover:bg-gray-100 text-gray-900'
                }`}
                style={{
                  borderLeft: activeDemo === index ? `4px solid ${feature.accent}` : '4px solid transparent'
                }}
              >
                {/* Premium glow effect */}
                {activeDemo === index && (
                  <motion.div
                    className="absolute inset-0 rounded-3xl opacity-20"
                    style={{ 
                      background: `linear-gradient(135deg, ${feature.accent}20, transparent)`,
                      filter: 'blur(20px)'
                    }}
                    initial={{ scale: 0.8, opacity: 0 }}
                    animate={{ scale: 1, opacity: 0.2 }}
                    transition={{ duration: 0.5 }}
                  />
                )}

                <div className="relative z-10">
                  <div className="flex items-center space-x-4 mb-4">
                    <motion.div
                      className="text-4xl"
                      animate={activeDemo === index ? { scale: [1, 1.2, 1] } : {}}
                      transition={{ duration: 0.5 }}
                    >
                      {feature.icon}
                    </motion.div>
                    <div>
                      <h3 className="text-2xl font-bold">{feature.title}</h3>
                      <p className={`text-sm ${
                        activeDemo === index ? 'text-gray-300' : 'text-gray-500'
                      }`}>
                        {feature.subtitle}
                      </p>
                    </div>
                  </div>
                  
                  <motion.p
                    className={`leading-relaxed ${
                      activeDemo === index ? 'text-gray-200' : 'text-gray-600'
                    }`}
                    initial={{ height: 0, opacity: 0 }}
                    animate={activeDemo === index ? { height: 'auto', opacity: 1 } : { height: 0, opacity: 0 }}
                    transition={{ duration: 0.3 }}
                  >
                    {activeDemo === index && feature.description}
                  </motion.p>

                  {/* Premium accent line */}
                  <motion.div
                    className="absolute bottom-0 left-0 h-1 rounded-full"
                    style={{ backgroundColor: feature.accent }}
                    initial={{ width: 0 }}
                    animate={{ width: activeDemo === index ? '100%' : '0%' }}
                    transition={{ duration: 0.5 }}
                  />
                </div>
              </motion.div>
            ))}
          </motion.div>

          {/* Interactive preview */}
          <motion.div 
            className="lg:col-span-7"
            initial={{ opacity: 0, x: 50 }}
            animate={inView ? { opacity: 1, x: 0 } : {}}
            transition={{ duration: 1, delay: 0.8 }}
          >
            <div className="relative">
              {/* Premium device frame */}
              <div className="relative bg-gradient-to-br from-gray-200 to-gray-300 p-8 rounded-3xl shadow-2xl">
                <div className="h-96 relative">
                  <AnimatePresence mode="wait">
                    <motion.div
                      key={activeDemo}
                      initial={{ opacity: 0, scale: 0.9, rotateY: 10 }}
                      animate={{ opacity: 1, scale: 1, rotateY: 0 }}
                      exit={{ opacity: 0, scale: 0.9, rotateY: -10 }}
                      transition={{ duration: 0.5, ease: "easeInOut" }}
                      className="absolute inset-0"
                    >
                      {renderPreview()}
                    </motion.div>
                  </AnimatePresence>
                </div>

                {/* Premium reflection effect */}
                <div className="absolute inset-0 bg-gradient-to-tr from-white/20 to-transparent rounded-3xl pointer-events-none" />
              </div>

              {/* Floating accent elements */}
              <motion.div
                className="absolute -top-4 -right-4 w-8 h-8 rounded-full shadow-lg"
                style={{ backgroundColor: demoFeatures[activeDemo]?.accent }}
                animate={{ 
                  y: [0, -10, 0],
                  scale: [1, 1.1, 1]
                }}
                transition={{ 
                  duration: 2, 
                  repeat: Infinity, 
                  ease: "easeInOut" 
                }}
              />
              
              <motion.div
                className="absolute -bottom-6 -left-6 w-6 h-6 rounded-full shadow-lg"
                style={{ backgroundColor: demoFeatures[activeDemo]?.accent, opacity: 0.7 }}
                animate={{ 
                  y: [0, 15, 0],
                  scale: [1, 0.9, 1]
                }}
                transition={{ 
                  duration: 3, 
                  repeat: Infinity, 
                  ease: "easeInOut",
                  delay: 1
                }}
              />
            </div>
          </motion.div>
        </div>

        {/* Premium feature indicators */}
        <motion.div
          className="flex justify-center mt-16 space-x-4"
          initial={{ opacity: 0, y: 30 }}
          animate={inView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8, delay: 1 }}
        >
          {demoFeatures.map((feature, index) => (
            <motion.button
              key={feature.id}
              onClick={() => setActiveDemo(index)}
              className={`w-3 h-3 rounded-full transition-all duration-300 ${
                activeDemo === index ? 'scale-125' : 'scale-100 opacity-50'
              }`}
              style={{ backgroundColor: feature.accent }}
              whileHover={{ scale: 1.4 }}
              whileTap={{ scale: 0.9 }}
            />
          ))}
        </motion.div>
      </div>

      {/* Custom styles for premium effects */}
      <style jsx>{`
        .bg-gradient-radial {
          background: radial-gradient(circle, var(--tw-gradient-stops));
        }
        
        .scrollbar-hide {
          -ms-overflow-style: none;
          scrollbar-width: none;
        }
        
        .scrollbar-hide::-webkit-scrollbar {
          display: none;
        }
      `}</style>
    </section>
  )
}
    '#EF4444', // Lili - Red
    '#F59E42', // Eric - Orange
    '#7B7481', // Kalina - Gray
    '#EC4899', // Alexandra - Pink
  ];

  function getSilkColor() {
    // Use selectedVoiceRight to pick the color from silkColors
    if (selectedVoiceRight === null) {
      return '#7B7481'; // Default Gray when no agent selected
    }
    if (selectedVoiceRight >= 0 && selectedVoiceRight < silkColors.length) {
      return silkColors[selectedVoiceRight];
    }
    return '#7B7481'; // Fallback
  }
  // Utility function to get button size classes based on screen width
  function getSwitcherButtonClasses() {
    if (typeof window !== 'undefined') {
      const width = window.innerWidth;
      if (width < 400) {
        return 'px-2 py-1 text-[9px]';
      } else if (width < 600) {
        return 'px-3 py-1 text-[10px]';
      } else if (width < 900) {
        return 'px-4 py-2 text-sm';
      } else {
        return 'px-6 py-2 text-base';
      }
    }
    // Default for SSR
    return 'px-4 py-2 text-sm';
  }

  // State to trigger re-render on resize
  const [screenWidth, setScreenWidth] = useState(typeof window !== 'undefined' ? window.innerWidth : 1200);
  useEffect(() => {
    function handleResize() {
      setScreenWidth(window.innerWidth);
    }
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  const [activeTab, setActiveTab] = useState<'conversation' | 'calendar' | 'magicbutton'>('conversation');
  const { t } = useLanguage();
  
  // Magic Button specific state
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisProgress, setAnalysisProgress] = useState(0);
  const [analysisSteps, setAnalysisSteps] = useState([
    { id: 1, text: 'Analizez istoricul conversa»õiilor', completed: false, current: false },
    { id: 2, text: 'Identific patternuri »ôi tendin»õe', completed: false, current: false },
    { id: 3, text: 'Segmentez contactele', completed: false, current: false },
    { id: 4, text: 'Generez campanii personalizate', completed: false, current: false },
    { id: 5, text: 'Optimizez timing »ôi mesaje', completed: false, current: false }
  ]);
  
  // Calendar-specific state
  const [selectedDate, setSelectedDate] = useState(15);
  const [aiMessages, setAiMessages] = useState([
    { from: 'ai', text: 'BunƒÉ! Cu ce te pot ajuta astƒÉzi?' },
    { from: 'user', text: 'A»ô vrea sƒÉ reprogramez √Ænt√¢lnirea pentru 22 iulie.' },
    { from: 'ai', text: 'Sigur! Am actualizat calendarul pentru 22 iulie. Mai pot face ceva pentru tine?' }
  ]);

  // Handle calendar date clicks
  const handleDateClick = (day: number) => {
    setSelectedDate(day);
    setAiMessages([
      ...aiMessages,
      { from: 'user', text: `A»ô vrea sƒÉ reprogramez √Ænt√¢lnirea pentru ${day} iulie.` },
      { from: 'ai', text: `Perfect! √ént√¢lnirea a fost mutatƒÉ pe ${day} iulie.` }
    ]);
  };

  // Handle Magic Button AI Analysis
  const handleMagicButtonClick = async () => {
    if (isAnalyzing) return;
    
    setIsAnalyzing(true);
    setAnalysisProgress(0);
    
    // Reset all steps
    setAnalysisSteps(steps => steps.map(step => ({ ...step, completed: false, current: false })));
    
    // Simulate AI analysis process
    for (let i = 0; i < analysisSteps.length; i++) {
      // Mark current step as active
      setAnalysisSteps(steps => steps.map((step, index) => ({
        ...step,
        current: index === i,
        completed: index < i
      })));
      
      // Simulate processing time (2-4 seconds per step)
      const processingTime = 2000 + Math.random() * 2000;
      await new Promise(resolve => setTimeout(resolve, processingTime));
      
      // Update progress
      setAnalysisProgress(((i + 1) / analysisSteps.length) * 100);
      
      // Mark step as completed
      setAnalysisSteps(steps => steps.map((step, index) => ({
        ...step,
        current: false,
        completed: index <= i
      })));
    }
    
    // Complete the analysis
    setTimeout(() => {
      setIsAnalyzing(false);
      setAnalysisProgress(100);
    }, 500);
  };

  // Ref pentru butonul selectat »ôi microfon
  const selectedCompanyRef = useRef<HTMLButtonElement>(null)
  const micRef = useRef<HTMLButtonElement>(null)
  type CompanyCurve = {
    x1: number;
    y1: number;
    x2: number;
    y2: number;
    width: number;
    height: number;
    curveOffset?: number;
  };
  const [curve, setCurve] = useState<CompanyCurve | null>(null)
  // No company selected by default
  const [selectedCompanyLeft, setSelectedCompanyLeft] = useState<number | null>(null) // No company selected by default
  const selectedVoiceRightRef = useRef<HTMLButtonElement>(null)
  const [voiceCurve, setVoiceCurve] = useState<
    | { x1: number; y1: number; x2: number; y2: number; width: number; height: number; curveOffset?: number }
    | null
  >(null)
  const [selectedVoiceRight, setSelectedVoiceRight] = useState<number | null>(null) // No agent selected by default
  // ...all useState and useRef declarations...
  // ...state declarations...
  // (all useState/useRef declarations go here)
  const [isPlaying, setIsPlaying] = useState(false)
  const [isRecording, setIsRecording] = useState(false)
  const [audioLevel, setAudioLevel] = useState(0)
  // Removed isHeaderOverDemo state
  const [conversationStatus, setConversationStatus] = useState<string>('')
  const [error, setError] = useState<string>('')
  const [selectedVoice, setSelectedVoice] = useState(0)
  const [selectedVoiceLeft, setSelectedVoiceLeft] = useState(0)
  const [scrollDirection, setScrollDirection] = useState<'up' | 'down' | null>(null);
  const lastScrollY = useRef<number>(typeof window !== 'undefined' ? window.scrollY : 0);
  const { ref, classes, isVisible } = useScrollAnimationReveal('up')
  const sectionRef = useRef<HTMLElement>(null)
  // Calculate curve for selected company option
  useLayoutEffect(() => {
    function updateCurve() {
      if (
        selectedCompanyLeft !== null &&
        selectedCompanyRef.current &&
        micRef.current &&
        sectionRef.current
      ) {
        const companyRect = selectedCompanyRef.current.getBoundingClientRect();
        const micRect = micRef.current.getBoundingClientRect();
        const sectionRect = sectionRef.current.getBoundingClientRect();
        const isMobile = window.innerWidth < 640;
        if (isMobile) {
          // Mobile: Companies start from center of selected item to center of microphone
          const x1 = companyRect.left + companyRect.width * 0.5 - sectionRect.left;
          const y1 = companyRect.top + companyRect.height * 0.5 - sectionRect.top - 100; // Increased Y start position for mobile
          const x2 = micRect.left + micRect.width * 0.5 - sectionRect.left;
          const y2 = micRect.top + micRect.height * 0.5 - sectionRect.top - 100;
          setCurve({
            x1,
            y1,
            x2,
            y2,
            width: sectionRect.width,
            height: sectionRect.height,
            curveOffset: 50 // Default curve offset
          });
        } else {
          // Desktop: Center-to-center line positioning
          console.log('Desktop mode - calculating center-to-center positions');
          
          // Calculate absolute center of company button
          const companyX = companyRect.left + (companyRect.width / 2);
          const companyY = companyRect.top + (companyRect.height / 2);
          
          // Calculate absolute center of microphone
          const micX = micRect.left + (micRect.width / 2);
          const micY = micRect.top + (micRect.height / 2);
          
          // Convert to relative coordinates within section
          const x1 = companyX - sectionRect.left + 50;
          const y1 = companyY - sectionRect.top - 140;
          const x2 = micX - sectionRect.left - 120;
          const y2 = micY - sectionRect.top - 140;
          
          console.log('Desktop curve calculation:', {
            selectedCompanyLeft,
            companyButton: { x: companyX, y: companyY, rect: companyRect },
            microphone: { x: micX, y: micY, rect: micRect },
            section: { left: sectionRect.left, top: sectionRect.top },
            finalCoords: { x1, y1, x2, y2 }
          });
          
          setCurve({
            x1,
            y1,
            x2,
            y2,
            width: sectionRect.width,
            height: sectionRect.height,
            curveOffset: 120 // Increased curve for desktop mode
          });
        }
      } else {
        setCurve(null);
      }
    }
    updateCurve()
    window.addEventListener('resize', updateCurve)
    return () => window.removeEventListener('resize', updateCurve)
  }, [selectedCompanyLeft, isRecording])

    // Voice options with exact MistralAI voice IDs provided by user
  const voiceOptions = [
    { name: 'Lili'},
    { name: 'Eric'},
    { name: 'Kalina'},
    { name: 'Alexandra'},
  ] as const
  
  const Companies = [
    { name: t('companies.restaurant')},
    { name: t('companies.clinic')},
    { name: t('companies.autoService')},
    { name: t('companies.travelAgency')},
  ] as const

  // Handle voice selection navigation with smooth animations
  const handleVoiceSelect = (direction: 'next' | 'prev') => {
    setSelectedVoice((prev) => {
      if (direction === 'next') {
        return prev >= voiceOptions.length - 1 ? 0 : prev + 1
      } else {
        return prev <= 0 ? voiceOptions.length - 1 : prev - 1
      }
    })
  }

  // Reset function to clear all states
  const resetDemoState = () => {
    setIsRecording(false)
    setError('')
    setConversationStatus('')
    setAudioLevel(0)
  }

  useEffect(() => {
    const handleScroll = () => {
      // Only detect scroll direction, no header overlap logic
      const currentY = window.scrollY;
      if (currentY > lastScrollY.current) {
        setScrollDirection('down');
      } else if (currentY < lastScrollY.current) {
        setScrollDirection('up');
      }
      lastScrollY.current = currentY;
    };
    if (typeof window !== 'undefined') {
      window.addEventListener('scroll', handleScroll)
      handleScroll() // Check initial state
    }
    return () => {
      if (typeof window !== 'undefined') {
        window.removeEventListener('scroll', handleScroll)
      }
    }
  }, [])

  // Removed header overlap effect

  // Handle demo click - purely visual demo without backend
  const handleDemoClick = async () => {
    if (!isRecording) {
      // Visual demo mode only
      setIsRecording(true)
      setConversationStatus(`Demo vizual cu ${voiceOptions[selectedVoice].name}...`)
      
      // Simulate demo conversation
      setTimeout(() => {
        setConversationStatus('Simulare ascultare...')
      }, 1000)
      
      setTimeout(() => {
        setConversationStatus('Simulare rƒÉspuns AI...')
      }, 3000)
      
      setTimeout(() => {
        setConversationStatus('Demo complet!')
        setTimeout(() => {
          setIsRecording(false)
          setConversationStatus('')
        }, 2000)
      }, 5000)
      
    } else {
      // Stop demo
      setIsRecording(false)
      setAudioLevel(0)
      setError('')
      setConversationStatus('')
    }
  }

  // Calculate voice curve for selected voice option
  useLayoutEffect(() => {
    function updateVoiceCurve() {
      if (
        selectedVoiceRight !== null &&
        selectedVoiceRightRef.current &&
        micRef.current &&
        sectionRef.current
      ) {
        const voiceRect = selectedVoiceRightRef.current.getBoundingClientRect();
        const micRect = micRef.current.getBoundingClientRect();
        const sectionRect = sectionRef.current.getBoundingClientRect();
        const isMobile = window.innerWidth < 640;
        
        if (isMobile) {
          // Mobile: Agents start from top center of button to center of microphone
          const x1 = voiceRect.left + voiceRect.width * 0.5 - sectionRect.left;
          const y1 = voiceRect.top - sectionRect.top - 100; // Top edge of button minus offset
          const x2 = micRect.left + micRect.width * 0.5 - sectionRect.left;
          const y2 = micRect.top + micRect.height * 0.5 - sectionRect.top - 100;
          setVoiceCurve({
            x1,
            y1,
            x2,
            y2,
            width: sectionRect.width,
            height: sectionRect.height,
            curveOffset: 50 // Default curve offset
          });
        } else {
          // Desktop: Center-to-center line positioning
          console.log('Desktop mode - calculating voice center-to-center positions');
          
          // Calculate absolute center of voice button
          const voiceX = voiceRect.left + (voiceRect.width / 2);
          const voiceY = voiceRect.top + (voiceRect.height / 2);
          
          // Calculate absolute center of microphone
          const micX = micRect.left + (micRect.width / 2);
          const micY = micRect.top + (micRect.height / 2);
          
          // Convert to relative coordinates within section
          const x1 = voiceX - sectionRect.left - 40;
          const y1 = voiceY - sectionRect.top - 150;
          const x2 = micX - sectionRect.left + 120;
          const y2 = micY - sectionRect.top - 140;

          console.log('Desktop voice curve calculation:', {
            selectedVoiceRight,
            voiceButton: { x: voiceX, y: voiceY, rect: voiceRect },
            microphone: { x: micX, y: micY, rect: micRect },
            section: { left: sectionRect.left, top: sectionRect.top },
            finalCoords: { x1, y1, x2, y2 }
          });
          
          setVoiceCurve({
            x1,
            y1,
            x2,
            y2,
            width: sectionRect.width,
            height: sectionRect.height,
            curveOffset: 50
          });
        }
      } else {
        setVoiceCurve(null);
      }
    }
    updateVoiceCurve()
    window.addEventListener('resize', updateVoiceCurve)
    return () => window.removeEventListener('resize', updateVoiceCurve)
  }, [selectedVoiceRight, isRecording])

  return (
    <section id="demo" ref={sectionRef} className="bg-white py-6 md:py-8">
      {/* Switcher buttons */}
      <div className="flex justify-center gap-4 mb-8">
        <button
          className={`rounded-full font-semibold border-2 transition-all duration-200 ${
            activeTab === 'conversation'
              ? 'bg-black text-white border-black'
              : 'bg-white text-black border-gray-300 hover:border-gray-400'
          } ${getSwitcherButtonClasses()}`}
          onClick={() => setActiveTab('conversation')}
        >
          Conversation AI
        </button>
        <button
          className={`rounded-full font-semibold border-2 transition-all duration-200 ${
            activeTab === 'calendar'
              ? 'bg-black text-white border-black'
              : 'bg-white text-black border-gray-300 hover:border-gray-400'
          } ${getSwitcherButtonClasses()}`}
          onClick={() => setActiveTab('calendar')}
        >
          Calendar AI
        </button>
        <button
          className={`rounded-full font-semibold border-2 transition-all duration-200 ${
            activeTab === 'magicbutton'
              ? 'bg-black text-white border-black'
              : 'bg-white text-black border-gray-300 hover:border-gray-400'
          } ${getSwitcherButtonClasses()}`}
          onClick={() => setActiveTab('magicbutton')}
        >
          Magic Button
        </button>
      </div>
      
      {/* Content Container with smooth transitions */}
      <div className="relative overflow-hidden">
        {/* Conversation AI Content */}
        <div 
          className={`transition-all duration-500 ease-in-out ${
            activeTab === 'conversation' 
              ? 'opacity-100 translate-x-0' 
              : 'opacity-0 -translate-x-full absolute inset-0 pointer-events-none'
          }`}
        >
        <div className="relative bg-gray-200 py-8 md:py-10">
          {/* Top white to gray fade overlay */}
          <div className="absolute left-0 top-0 w-full h-24 pointer-events-none z-0 border-none" style={{
            background: 'linear-gradient(to bottom, rgba(255,255,255,0.99) 0%, rgba(229,231,235,1) 100%)',
          }} />
          {/* Bottom blur/fade overlay */}
          <div className="absolute left-0 bottom-0 w-full h-24 pointer-events-none z-0 border-none" style={{
            background: 'linear-gradient(to top, rgba(255,255,255,0.99) 0%, rgba(229,231,235,1) 100%)',
          }} />
          <div ref={ref} style={{ position: 'relative' }}>
        {/* SVG lines moved below content to avoid interfering with text */}
        <div style={{ position: 'absolute', left: 0, top: 0, width: '100%', height: '100%', pointerEvents: 'none', zIndex: 0 }}>
          {curve && selectedCompanyLeft !== null && (
            <svg
              style={{
                position: 'absolute',
                left: 0,
                top: 0,
                pointerEvents: 'none',
                width: curve.width,
                height: curve.height,
              }}
              width={curve.width}
              height={curve.height}
            >
              {window.innerWidth < 640 ? (
                // Mobile: curve from bottom of company, curve up to mic center
                <AnimatedPath
                  d={`M ${curve.x1} ${curve.y1} C ${curve.x1} ${curve.y1 + ((curve.y2 - curve.y1) / 2)}, ${curve.x2} ${curve.y2 - ((curve.y2 - curve.y1) / 2)}, ${curve.x2} ${curve.y2}`}
                  stroke="black"
                  strokeWidth={3}
                  fill="none"
                  opacity={0.7}
                  duration={800}
                />
              ) : (
                // Desktop: original horizontal curve
                <AnimatedPath
                  d={`M ${curve.x1} ${curve.y1} C ${curve.x1 + (curve.curveOffset ?? 120)} ${curve.y1}, ${curve.x2 - (curve.curveOffset ?? 120)} ${curve.y2}, ${curve.x2} ${curve.y2}`}
                  stroke="black"
                  strokeWidth={3}
                  fill="none"
                  opacity={0.7}
                  duration={800}
                />
              )}
            </svg>
          )}
          {voiceCurve && selectedVoiceRight !== null && (
            <svg
              style={{
                position: 'absolute',
                left: 0,
                top: 0,
                pointerEvents: 'none',
                width: voiceCurve.width,
                height: voiceCurve.height,
              }}
              width={voiceCurve.width}
              height={voiceCurve.height}
            >
              {window.innerWidth < 640 ? (
                // Mobile: curve using curveOffset from agentVoicesMobileLineConfig
                <AnimatedPath
                  d={`M ${voiceCurve.x1} ${voiceCurve.y1} C ${voiceCurve.x1 + (voiceCurve.curveOffset ?? 50)} ${voiceCurve.y1}, ${voiceCurve.x2 - (voiceCurve.curveOffset ?? 50)} ${voiceCurve.y2}, ${voiceCurve.x2} ${voiceCurve.y2}`}
                  stroke="black"
                  strokeWidth={3}
                  fill="none"
                  opacity={0.7}
                  duration={800}
                />
              ) : (
                <AnimatedPath
                  d={`M ${voiceCurve.x1} ${voiceCurve.y1} C ${voiceCurve.x1 - 80} ${voiceCurve.y1}, ${voiceCurve.x2 + 80} ${voiceCurve.y2}, ${voiceCurve.x2} ${voiceCurve.y2}`}
                  stroke="black"
                  strokeWidth={3}
                  fill="none"
                  opacity={0.7}
                  duration={800}
                />
              )}
            </svg>
          )}
        </div>
      {/* Close the previously opened <div ref={ref} ...> */}
      </div>
        <div className={`transition-all duration-1000 ${
          isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-20'}`}>
          <div
            className="border border-transparent rounded-lg overflow-hidden bg-transparent"
            style={{
              marginLeft: 'auto',
              marginRight: 'auto',
              width: '100%',
              maxWidth: '1000px',
              minHeight: '400px',
              height: 'auto',
              boxSizing: 'border-box',
            }}
          >
            {/* Header Section */}
            <div className="text-center mb-10 mt-8 sm:mb-16 sm:mt-11 px-2">
              <h2 className="text-2xl sm:text-3xl md:text-5xl font-bold text-black mb-3 sm:mb-4">
                {t('demoSection.title')}
              </h2>
              <p className="text-base sm:text-lg md:text-xl text-gray-600 max-w-2xl mx-auto">
                {t('demoSection.description')}
              </p>
            </div>

            {/* Voice Selection */}
            {!isRecording && (
              <div className="mb-8 sm:mb-12 flex flex-col sm:flex-row items-center justify-between gap-8 sm:gap-0 px-2 sm:px-6 w-full">
                {/* Companies on the left */}
                <div className="flex flex-row sm:flex-col gap-2 sm:gap-4 items-start sm:pr-6 w-full sm:w-auto justify-center" style={{zIndex: 10, position: 'relative'}}>
                  {Companies.map((company, idx) => (
                    <button
                      key={idx}
                      ref={selectedCompanyLeft === idx ? selectedCompanyRef : undefined}
                      onClick={() => setSelectedCompanyLeft(idx)}
                      className={`px-4 py-2 sm:px-6 sm:py-3 md:px-8 md:py-4 rounded-full border-2 transition-all duration-200 font-medium text-xs sm:text-sm md:text-base ${
                        selectedCompanyLeft === idx
                          ? 'bg-black text-white border-black'
                          : selectedCompanyLeft === null
                            ? 'bg-white text-black border-gray-300 hover:border-gray-400 opacity-70'
                            : 'bg-white text-black border-gray-300 hover:border-gray-400'
                      }`}
                      style={{ minWidth: '80px', textAlign: 'center', position: 'relative', zIndex: 10 }}
                    >
                      <span style={{ position: 'relative', zIndex: 10 }}>{company.name}</span>
                    </button>
                  ))}
                </div>
                {/* Centered microphone */}
                <div className="flex flex-col items-center justify-center flex-1 w-full sm:w-auto" style={{position: 'relative'}}>
                  <button
                    ref={micRef}
                    onClick={handleDemoClick}
                    className={`relative rounded-full text-white transition-all duration-300 hover:scale-105 w-20 h-20 sm:w-28 sm:h-28 md:w-44 md:h-44 lg:w-56 lg:h-56 xl:w-64 xl:h-64 bg-transparent`}
                    style={{ margin: '0 0.5rem', overflow: 'hidden', padding: 0 }}
                  >
                    <div style={{position: 'absolute', inset: 0, borderRadius: '50%', overflow: 'hidden', zIndex: 100}}>
                      {/* Force Silk to re-mount when color changes to restart animation */}
                      <Silk key={selectedVoiceRight ?? 'default'} speed={5} scale={1.2} color={getSilkColor()} noiseIntensity={1.5} rotation={0.2} />
                    </div>
                    <svg className="w-10 h-10 sm:w-14 sm:h-14 md:w-24 md:h-24 lg:w-32 lg:h-32 xl:w-40 xl:h-40 mx-auto" style={{position: 'relative', zIndex: 200}} fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clipRule="evenodd" />
                    </svg>
                  </button>
                  {/* Removed text below microphone button for cleaner UI */}
                </div>
                {/* Agents on the right (independent selector) */}
                <div className="flex flex-row sm:flex-col gap-2 sm:gap-4 items-end sm:pl-6 w-full sm:w-auto justify-center" style={{zIndex: 10, position: 'relative'}}>
                  {[0,1,2,3].map((index) => (
                    <button
                      key={index}
                      ref={selectedVoiceRight === index ? selectedVoiceRightRef : undefined}
                      onClick={() => {
                        setSelectedVoiceRight(index);
                        setSelectedVoice(index); // Sync Silk color with selected agent
                      }}
                      className={`px-4 py-2 sm:px-6 sm:py-3 md:px-8 md:py-4 rounded-full border-2 transition-all duration-200 font-medium text-xs sm:text-sm md:text-base ${
                        selectedVoiceRight === index 
                          ? 'bg-black text-white border-black' 
                          : selectedVoiceRight === null
                            ? 'bg-white text-black border-gray-300 hover:border-gray-400 opacity-70'
                            : 'bg-white text-black border-gray-300 hover:border-gray-400'
                      }`}
                      style={{ minWidth: '80px', textAlign: 'center', position: 'relative', zIndex: 10 }}
                    >
                      <span style={{ position: 'relative', zIndex: 10 }}>{voiceOptions[index].name}</span>
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Demo Interface */}
            <div className="max-w-2xl mx-auto w-full px-2 sm:px-0">
              
              {/* Removed demo button and text below microphone */}

              {/* Status Messages */}
              <div className="text-center space-y-2 sm:space-y-4">
                {conversationStatus && (
                  <div className="px-4 py-2 bg-gray-100 border border-gray-200 rounded-lg">
                    <p className="text-black text-sm">{conversationStatus}</p>
                  </div>
                )}
                
                {error && (
                  <div className="px-4 py-2 bg-red-50 border border-red-200 rounded-lg">
                    <p className="text-red-700 text-sm mb-2">{error}</p>
                    <button 
                      onClick={resetDemoState}
                      className="text-red-600 text-xs underline hover:text-red-800 transition-colors"
                    >
                      Try again
                    </button>
                  </div>
                )}

                {isRecording && (
                  <div className="flex items-center justify-center space-x-2">
                    <div className={`w-2 h-2 sm:w-2 sm:h-2 rounded-full bg-green-500 animate-pulse`}></div>
                    <span className="text-gray-700 text-xs sm:text-sm">
                      Demo √Æn curs cu {voiceOptions[selectedVoice].name}
                    </span>
                  </div>
                )}
              </div>
            </div>
            {/* Features List */}
              {!isRecording && (
                <div className="mt-10 sm:mt-16 w-full px-1 sm:px-4 relative">
                  {/* Fade overlays for left/right edges */}
                  <div className="pointer-events-none absolute left-0 top-0 h-full w-8 sm:w-16 z-10" style={{background: 'linear-gradient(to right, rgba(243,244,246,0.7) 60%, rgba(243,244,246,0) 100%)'}} />
                  <div className="pointer-events-none absolute right-0 top-0 h-full w-8 sm:w-16 z-10" style={{background: 'linear-gradient(to left, rgba(243,244,246,0.7) 60%, rgba(243,244,246,0) 100%)'}} />
                  <div className="overflow-x-auto custom-scrollbar">
                    <div className="flex gap-4 sm:gap-20 pb-4 min-w-max lg:justify-center px-2 sm:px-4 lg:px-0">
                      {[ 
                        { title: t('conversationAIFeatures.naturalConversations'), desc: t('conversationAIFeatures.naturalConversationsDesc') },
                        { title: t('conversationAIFeatures.realisticVoice'), desc: t('conversationAIFeatures.realisticVoiceDesc') },
                        { title: t('conversationAIFeatures.instantResponse'), desc: t('conversationAIFeatures.instantResponseDesc') },
                        { title: t('conversationAIFeatures.multilingual'), desc: t('conversationAIFeatures.multilingualDesc') },
                        { title: t('conversationAIFeatures.adaptive'), desc: t('conversationAIFeatures.adaptiveDesc') },
                        { title: t('conversationAIFeatures.secure'), desc: t('conversationAIFeatures.secureDesc') }
                      ].map((feature, idx) => (
                        <div
                          key={idx}
                          className="flex-shrink-0 w-48 sm:w-64 text-center p-3 sm:p-6 rounded-lg border border-gray-200 hover:border-gray-300 transition-colors duration-200 bg-white"
                        >
                          <h4 className="text-black font-semibold text-base sm:text-lg mb-1 sm:mb-2">{feature.title}</h4>
                          <p className="text-gray-600 text-xs sm:text-sm">{feature.desc}</p>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}
          </div>
          </div>
          </div>
        </div>
        
        {/* Calendar AI Content */}
        <div 
          className={`transition-all duration-500 ease-in-out ${
            activeTab === 'calendar' 
              ? 'opacity-100 translate-x-0' 
              : 'opacity-0 translate-x-full absolute inset-0 pointer-events-none'
          }`}
        >
          <div className="relative bg-blue-100 py-8 md:py-10">
          {/* Top white fade overlay */}
          <div className="absolute left-0 top-0 w-full h-24 pointer-events-none z-0 border-none" style={{
            background: 'linear-gradient(to bottom, rgba(255,255,255,0.99) 0%, rgba(255,255,255,0.0) 100%)',
          }} />
          {/* Bottom blur/fade overlay */}
          <div className="absolute left-0 bottom-0 w-full h-24 pointer-events-none z-0 border-none" style={{
            background: 'linear-gradient(to top, rgba(255,255,255,0.99) 0%, rgba(255,255,255,0.0) 100%)',
          }} />
            <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
              {/* Header */}
              <div className={`text-center mb-8 transition-all duration-1000 ${
                isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-20'
              }`}>
                <h2 className="text-3xl md:text-4xl font-bold text-black mb-4 mt-9">
                  Revolu»õia Calendarului AI
                </h2>
                <p className="text-gray-600 text-lg max-w-2xl mx-auto">
                  Calendarul care g√¢nde»ôte »ôi ac»õioneazƒÉ pentru tine cu AI avansat. ProgrameazƒÉ √Ænt√¢lniri doar vorbind cu asistentul tƒÉu digital.
                </p>
              </div>
              
              {/* AI Chat Simulation */}
              <div className="max-w-xl mx-auto mb-10">
                <div className="bg-gray-900 rounded-xl shadow-lg p-6 flex flex-col gap-3 animate-fade-in">
                  {aiMessages.map((msg, idx) => (
                    <div key={idx} className={`flex ${msg.from === 'ai' ? 'justify-start' : 'justify-end'}`}>
                      <div className={`px-4 py-2 rounded-2xl text-sm max-w-xs break-words shadow-md transition-all duration-300 ${
                        msg.from === 'ai'
                          ? 'bg-gradient-to-br from-blue-600 to-indigo-700 text-white'
                          : 'bg-white text-black border border-gray-200'
                      }`}>
                        {msg.text}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              
              {/* Animated Calendar */}
              <div className="flex flex-col items-center justify-center gap-8 mb-12 transition-all duration-1000 delay-200">
                <div className="w-full max-w-xl bg-white border border-gray-200 rounded-lg shadow p-6">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-xl font-semibold text-black">Iulie 2025</h3>
                    <div className="space-x-2">
                      <button className="bg-black text-white px-3 py-1 rounded hover:bg-gray-800 transition-colors duration-200">‚Üê</button>
                      <button className="bg-black text-white px-3 py-1 rounded hover:bg-gray-800 transition-colors duration-200">‚Üí</button>
                    </div>
                  </div>
                  <div className="grid grid-cols-7 gap-2 text-center">
                    {['D','L','Ma','Mi','J','V','S'].map(day => (
                      <div key={day} className="text-gray-500 font-medium">{day}</div>
                    ))}
                    {/* July 2025 starts on Tuesday (so 1 empty cell) */}
                    <div></div>
                    {Array.from({length: 31}, (_,i) => (
                      <div
                        key={i+1}
                        className={`py-2 rounded-lg cursor-pointer font-medium transition-all duration-300
                          ${selectedDate === i+1
                            ? 'bg-gradient-to-br from-blue-600 to-indigo-700 text-white scale-110 shadow-lg'
                            : 'text-black hover:bg-gray-100'}
                        `}
                        onClick={() => handleDateClick(i+1)}
                        style={{position:'relative'}}
                      >
                        {i+1}
                        {selectedDate === i+1 && (
                          <span className="absolute -top-2 -right-2 bg-blue-600 text-white text-xs px-2 py-0.5 rounded-full animate-bounce shadow">AI</span>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              </div>
              
              {/* Call to action */}
              <div className={`text-center mt-4 transition-all duration-1000 delay-600 ${
                isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-20'
              }`}>
                <p className="text-gray-600 mb-6">
                  Calendar AI inteligent, orchestrare campanii, automatizare programƒÉri. √éncearcƒÉ acum!
                </p>
                <a
                  href="/calendar-ai"
                  className="inline-block bg-black text-white px-8 py-3 rounded-lg font-medium hover:bg-gray-800 transition-colors duration-200"
                >
                  AflƒÉ mai multe
                </a>
              </div>
            </div>
          </div>
        </div>

        {/* Magic Button Content */}
        <div 
          className={`transition-all duration-500 ease-in-out ${
            activeTab === 'magicbutton' 
              ? 'opacity-100 translate-x-0' 
              : 'opacity-0 translate-x-full absolute inset-0 pointer-events-none'
          }`}
        >
          <div className="relative py-8 md:py-12 bg-gradient-to-br from-purple-50 to-pink-50">
          {/* Top white fade overlay for Magic Button */}
          <div className="absolute left-0 top-0 w-full h-24 pointer-events-none z-0 border-none" style={{
            background: 'linear-gradient(to bottom, rgba(255,255,255,0.95) 0%, rgba(255,255,255,0.0) 100%)',
          }} />
          {/* Bottom blur/fade overlay for Magic Button */}
          <div className="absolute left-0 bottom-0 w-full h-24 pointer-events-none z-0 border-none" style={{
            background: 'linear-gradient(to top, rgba(255,255,255,0.95) 0%, rgba(255,255,255,0.0) 100%)',
          }} />
            {/* Animated background pattern */}
            {/* <div className="absolute inset-0 z-0 pointer-events-none">
              <div className="absolute inset-0 bg-gradient-to-br from-purple-100/30 to-pink-100/30"></div>
              <div className="absolute inset-0" style={{
                backgroundImage: `radial-gradient(circle at 25% 25%, #8B5CF6 0.5px, transparent 0.5px), 
                                 radial-gradient(circle at 75% 75%, #EC4899 0.5px, transparent 0.5px)`,
                backgroundSize: '30px 30px',
                opacity: 0.1
              }}></div>
            </div> */}
            
            <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
              {/* Header */}
              <div className="text-center mb-12">
                <div className="inline-flex items-center gap-2 bg-purple-600 text-white px-4 py-2 rounded-full text-sm font-medium mb-4">
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clipRule="evenodd" />
                  </svg>
                  Buton Fermecat
                </div>
                <h2 className="text-3xl md:text-5xl font-bold text-black mb-4">
                  Creator Inteligent de Campanii
                </h2>
                <p className="text-lg text-gray-600 max-w-3xl mx-auto">
                  Func»õia unicƒÉ care analizeazƒÉ toate datele tale pentru a crea campanii personalizate »ôi optimizate automat.
                </p>
              </div>

              {/* Features Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-12">
                <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                      </svg>
                    </div>
                    <h3 className="text-xl font-semibold text-black">AnalizƒÉ AI AvansatƒÉ</h3>
                  </div>
                  <p className="text-gray-600">Procesez istoric conversa»õii, patternuri de comportament »ôi preferin»õe cliente</p>
                </div>

                <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                      </svg>
                    </div>
                    <h3 className="text-xl font-semibold text-black">RAG & MCP Integration</h3>
                  </div>
                  <p className="text-gray-600">Folosesc toate sursele de date conectate pentru context complet</p>
                </div>

                <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 00-2 2v2m0 0V9a2 2 0 012-2m0 0V7a2 2 0 012-2h10a2 2 0 012 2v2M7 7V5a2 2 0 012-2h6a2 2 0 012 2v2" />
                      </svg>
                    </div>
                    <h3 className="text-xl font-semibold text-black">Segmentare InteligentƒÉ</h3>
                  </div>
                  <p className="text-gray-600">√émpart contactele √Æn segmente pentru campanii ultra-personalizate</p>
                </div>

                <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center">
                      <svg className="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                      </svg>
                    </div>
                    <h3 className="text-xl font-semibold text-black">Optimizare AutomatƒÉ</h3>
                  </div>
                  <p className="text-gray-600">Aleg cel mai bun timing, agent »ôi mesaj pentru fiecare contact</p>
                </div>
              </div>

              {/* Magic Button Action */}
              <div className="text-center mb-8">
                <button
                  onClick={handleMagicButtonClick}
                  disabled={isAnalyzing}
                  className={`inline-flex items-center gap-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white px-8 py-4 rounded-full font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-300 ${
                    isAnalyzing ? 'opacity-75 cursor-not-allowed' : 'hover:scale-105'
                  }`}
                >
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clipRule="evenodd" />
                  </svg>
                  {isAnalyzing ? 'ActiveazƒÉ Magia AI' : 'ActiveazƒÉ Magia AI'}
                </button>
                <p className="text-gray-600 mt-4">
                  {isAnalyzing ? `Procesul va dura ${Math.ceil((100 - analysisProgress) / 20)} secunde pentru analizƒÉ completƒÉ` : 'Procesul va dura 10-15 secunde pentru analizƒÉ completƒÉ'}
                </p>
              </div>

              {/* Analysis Progress */}
              {(isAnalyzing || analysisProgress > 0) && (
                <div className="max-w-2xl mx-auto">
                  <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100 mb-6">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-lg font-semibold text-black">üîç AnalizƒÉ AI √Æn progres...</h3>
                      <span className="text-sm text-gray-500">{Math.round(analysisProgress)}%</span>
                    </div>
                    
                    {/* Progress Bar */}
                    <div className="w-full bg-gray-200 rounded-full h-3 mb-6">
                      <div 
                        className="bg-gradient-to-r from-purple-600 to-pink-600 h-3 rounded-full transition-all duration-300 ease-out"
                        style={{ width: `${analysisProgress}%` }}
                      ></div>
                    </div>

                    {/* Analysis Steps */}
                    <div className="space-y-3">
                      {analysisSteps.map((step) => (
                        <div key={step.id} className={`flex items-center gap-3 p-3 rounded-lg transition-all duration-300 ${
                          step.current ? 'bg-purple-50 border border-purple-200' : 
                          step.completed ? 'bg-green-50 border border-green-200' : 
                          'bg-gray-50 border border-gray-200'
                        }`}>
                          <div className={`w-6 h-6 rounded-full flex items-center justify-center ${
                            step.completed ? 'bg-green-500 text-white' :
                            step.current ? 'bg-purple-500 text-white' :
                            'bg-gray-300 text-gray-600'
                          }`}>
                            {step.completed ? (
                              <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                              </svg>
                            ) : step.current ? (
                              <div className="w-3 h-3 bg-white rounded-full animate-pulse"></div>
                            ) : (
                              <span className="text-xs">{step.id}</span>
                            )}
                          </div>
                          <span className={`text-sm font-medium ${
                            step.current ? 'text-purple-700' :
                            step.completed ? 'text-green-700' :
                            'text-gray-600'
                          }`}>
                            {step.text}
                          </span>
                          {step.current && (
                            <div className="ml-auto">
                              <div className="flex gap-1">
                                <div className="w-1 h-1 bg-purple-500 rounded-full animate-bounce"></div>
                                <div className="w-1 h-1 bg-purple-500 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                                <div className="w-1 h-1 bg-purple-500 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                              </div>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>

                  {analysisProgress === 100 && !isAnalyzing && (
                    <div className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-xl p-6 text-center">
                      <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <svg className="w-8 h-8 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                        </svg>
                      </div>
                      <h3 className="text-xl font-bold text-green-800 mb-2">Analiza completƒÉ!</h3>
                      <p className="text-green-700 mb-4">
                        Am generat 3 campanii personalizate »ôi optimizate pentru audien»õa ta. Gata de lansare!
                      </p>
                      <button 
                        onClick={() => {
                          setAnalysisProgress(0);
                          setAnalysisSteps(steps => steps.map(step => ({ ...step, completed: false, current: false })));
                        }}
                        className="bg-green-600 text-white px-6 py-2 rounded-lg font-medium hover:bg-green-700 transition-colors"
                      >
                        ReseteazƒÉ Demo
                      </button>
                      <a href="/magic-button" className="ml-3 bg-purple-600 text-white px-6 py-2 rounded-lg font-medium hover:bg-purple-700 transition-colors inline-block">
                        AflƒÉ mai multe
                      </a>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

