# Blog Layout Documentation

## Overview
This blog system is designed to be fully dynamic and JSON-driven, allowing for easy content management and automatic article generation through bots.

## File Structure
```
src/app/blog/
├── page.tsx              # Main blog listing page
├── [id]/
│   └── page.tsx          # Dynamic article detail pages
├── articles.json         # Article data source
└── layout.txt           # This documentation file
```

## JSON Structure for Articles

The `articles.json` file follows this structure:

```json
{
  "articles": [
    {
      "id": "unique-article-identifier",
      "title": "Article Title",
      "content": "Full article content with \\n for line breaks",
      "authorName": "Author Name",
      "sourceDomain": "source-website.com",
      "category": "Article Category",
      "publishedAt": "2024-01-20T10:00:00Z",
      "image": "https://example.com/image.jpg",
      "seoMetadata": {
        "keywords": "comma, separated, keywords",
        "metaDescription": "SEO description for the article",
        "metaTitle": "SEO title for the article"
      }
    }
  ]
}
```

## Features

### 1. Dynamic Article Cards
- **Responsive Grid**: 1 column on mobile, 2 on tablet, 3 on desktop
- **Image Support**: Automatic placeholder if no image provided
- **Category Badges**: Automatically displayed from article data
- **Reading Time**: Calculated based on content length
- **Hover Effects**: Smooth transitions and scale effects

### 2. Category Filtering
- **Auto-Generated**: Categories extracted from articles automatically
- **Dynamic Buttons**: Responsive filter buttons
- **Real-time Filtering**: Instant filtering without page reload

### 3. Article Detail Pages
- **Dynamic Routing**: `/blog/[article-id]` structure
- **SEO Optimized**: Uses meta titles and descriptions from JSON
- **Breadcrumb Navigation**: Clear navigation path
- **Author Information**: Displays author with avatar placeholder
- **Content Formatting**: Converts line breaks and paragraphs
- **Tag Display**: Shows keywords as clickable tags

### 4. Loading States
- **Skeleton Loading**: Smooth loading animation
- **Error Handling**: Graceful error states
- **Not Found Pages**: Custom 404 for missing articles

## Bot Integration Guide

### Adding New Articles
To add a new article, simply append it to the `articles` array in `articles.json`:

```json
{
  "id": "bot-generated-unique-id",
  "title": "Your Bot Generated Title",
  "content": "Your bot generated content with proper \\n line breaks",
  "authorName": "Bot Author Name",
  "sourceDomain": "your-domain.com",
  "category": "AI Generated",
  "publishedAt": "2024-01-20T10:00:00Z",
  "image": "https://your-image-url.com/image.jpg",
  "seoMetadata": {
    "keywords": "ai, automation, bot generated",
    "metaDescription": "Bot generated meta description",
    "metaTitle": "Bot Generated SEO Title"
  }
}
```

### Content Formatting Rules
1. **Line Breaks**: Use `\\n` for single line breaks, `\\n\\n` for paragraph breaks
2. **HTML**: Basic HTML tags are supported in content
3. **Images**: Provide full URLs for images
4. **IDs**: Use unique, URL-friendly identifiers

### SEO Best Practices
1. **Unique IDs**: Each article must have a unique ID
2. **Meta Titles**: Keep under 60 characters
3. **Meta Descriptions**: Keep under 160 characters
4. **Keywords**: Use relevant, comma-separated keywords
5. **Images**: Include alt-friendly images

## Styling Guidelines

### Color Scheme
- **Primary**: Blue (#2563eb)
- **Secondary**: Gray (#6b7280)
- **Background**: White (#ffffff)
- **Borders**: Light gray (#e5e7eb)

### Typography
- **Headings**: Font weight 700 (bold)
- **Body**: Font weight 400 (normal)
- **Meta**: Font weight 500 (medium)

### Responsive Breakpoints
- **Mobile**: < 768px (1 column)
- **Tablet**: 768px - 1024px (2 columns)
- **Desktop**: > 1024px (3 columns)

## Performance Considerations

### Image Optimization
- Use WebP format when possible
- Provide responsive image sizes
- Include proper alt text for accessibility

### Loading Performance
- Articles load dynamically from JSON
- Lazy loading for images
- Minimal JavaScript for faster load times

### SEO Optimization
- Dynamic meta tags per article
- Structured data support
- Clean URL structure
- Proper heading hierarchy

## Customization Options

### Adding New Fields
To add new fields to articles, update:
1. The `Article` interface in both page files
2. The JSON structure
3. The display components as needed

### Styling Changes
- Update Tailwind classes in components
- Modify the color scheme in guidelines
- Adjust responsive breakpoints as needed

### Functionality Enhancements
- Add search functionality
- Implement pagination
- Add social sharing buttons
- Include comment systems

## Deployment Notes

### Static Generation
- Articles are dynamically imported
- No server-side rendering required for JSON files
- Fast static site generation

### CDN Compatibility
- All images should be served from CDN
- JSON files are cached efficiently
- Optimal for global distribution

This layout provides a complete, scalable, and maintainable blog system that can be easily automated with bot-generated content while maintaining professional appearance and SEO optimization.
